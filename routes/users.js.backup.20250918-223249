const express = require("express");
const { body, validationResult } = require("express-validator");
const User = require("../models/User");
const { authenticateToken } = require("../middleware/auth");
const { sendEmail, buildCodeEmailTemplate } = require("../utils/email");

const router = express.Router();

/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: Get a paginated list of all active users (including yourself)
 *     tags:
 *       - Users
 *     parameters:
 *       - in: query
 *         name: page
 *         required: false
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Page number
 *       - in: query
 *         name: limit
 *         required: false
 *         schema:
 *           type: integer
 *           default: 20
 *         description: Number of users per page
 *     responses:
 *       200:
 *         description: List of users
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
// @route   GET /api/users
// @desc    Get all users (paginated)
// @access  Public
router.get("/", async (req, res) => {
	try {
		const { page = 1, limit = 20 } = req.query;

		const pageInt = parseInt(page);
		const limitInt = parseInt(limit);

		const query = {
			isActive: true,
		};

		const users = await User.find(query)
			.skip((pageInt - 1) * limitInt)
			.limit(limitInt);

		const total = await User.countDocuments(query);

		res.json({
			success: true,
			data: users,
			pagination: {
				currentPage: pageInt,
				totalPages: Math.ceil(total / limitInt),
				totalUsers: total,
				hasNextPage: pageInt * limitInt < total,
				hasPrevPage: pageInt > 1,
			},
		});
	} catch (error) {
		console.error("Get users error:", error);
		res.status(500).json({
			success: false,
			message: "Internal server error",
		});
	}
});

/**
 * @swagger
 * /api/users/me:
 *   get:
 *     summary: Get current user's profile
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: User profile
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.get("/me", authenticateToken, async (req, res) => {
	try {
		const user = await User.findById(req.user._id).exec();
		if (!user) {
			return res
				.status(404)
				.json({ success: false, message: "User not found" });
		}

		// Update online status
		user.isOnline = true;
		user.lastSeen = new Date();
		await user.save();

		// Get full profile
		const fullProfile = await user.getFullProfile();
		if (fullProfile.password) delete fullProfile.password;

		res.json({ success: true, data: fullProfile });
	} catch (error) {
		console.error("Get profile error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/profile:
 *   put:
 *     summary: Update user profile
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *                 minLength: 3
 *                 maxLength: 20
 *               status:
 *                 type: string
 *                 maxLength: 100
 *               password:
 *                 type: string
 *                 minLength: 6
 *               profilePicture:
 *                 type: string
 *                 format: url
 *               email:
 *                 type: string
 *                 format: email
 *               phoneNumber:
 *                 type: string
 *                 description: User phone number
 *               access_token:
 *                 type: string
 *                 description: Optional token for authentication or third-party integration
 *     responses:
 *       200:
 *         description: Profile updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *                   properties:
 *                     userId:
 *                       type: string
 *                     id:
 *                       type: string
 *                     username:
 *                       type: string
 *                     status:
 *                       type: string
 *                     profilePicture:
 *                       type: string
 *                     email:
 *                       type: string
 *                       format: email
 *                     phoneNumber:
 *                       type: string
 *                     isOnline:
 *                       type: boolean
 *                     lastSeen:
 *                       type: string
 *                     access_token:
 *                       type: string
 *                       description: Optional token for authentication or third-party integration
 *       400:
 *         description: Invalid request or username taken
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
// @route   PUT /api/users/profile
// @desc    Update user profile
// @access  Private
router.put(
	"/profile",
	authenticateToken,
	[
		body("username")
			.optional()
			.isLength({ min: 3, max: 20 })
			.withMessage("Username must be between 3 and 20 characters"),
		body("status")
			.optional()
			.isLength({ max: 100 })
			.withMessage("Status cannot exceed 100 characters"),
		body("password")
			.optional()
			.isLength({ min: 6 })
			.withMessage("Password must be at least 6 characters"),
		body("profilePicture")
			.optional()
			.isURL()
			.withMessage("Profile picture must be a valid URL"),
		body("email").optional().isEmail().withMessage("Email must be valid"),
		body("phoneNumber")
			.optional()
			.isMobilePhone()
			.withMessage("Phone number must be valid"),
	],
	async (req, res) => {
		try {
			const errors = validationResult(req);
			if (!errors.isEmpty()) {
				return res.status(400).json({
					success: false,
					errors: errors.array(),
				});
			}
			const user = await User.findById(req.user._id).exec();
			if (req.body.status) user.status = req.body.status;
			if (req.body.password) user.password = req.body.password;
			if (req.body.profilePicture)
				user.profilePicture = req.body.profilePicture;
			if (req.body.email) user.email = req.body.email;
			if (req.body.phoneNumber) user.phoneNumber = req.body.phoneNumber;

			await user.save();
			res.json({
				success: true,
				message: `Profile updated`,
				data: {
					userId: user._id.toString(),
					id: user._id.toString(),
					username: user.username,
					status: user.status,
					profilePicture: user.profilePicture,
					email: user.email,
					phoneNumber: user.phoneNumber,
					isOnline: user.isOnline,
					lastSeen: user.lastSeen,
					...(req.body.access_token
						? { access_token: req.body.access_token }
						: {}),
				},
			});
		} catch (error) {
			console.error("Update profile error:", error);
			res.status(500).json({
				success: false,
				message: "Internal server error",
			});
		}
	}
);

/**
 * @swagger
 * /api/users/me:
 *   delete:
 *     summary: Permanently delete the authenticated user's account
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Account deleted
 *       401:
 *         description: Unauthorized
 */
router.delete("/me", authenticateToken, async (req, res) => {
	try {
		await User.deleteOne({ _id: req.user._id });
		res.json({ success: true, message: "Account permanently deleted" });
	} catch (error) {
		console.error("Delete account error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/phone/verify/send-code:
 *   post:
 *     summary: Send phone verification code to the user's email
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Code sent
 */
router.post("/phone/verify/send-code", authenticateToken, async (req, res) => {
	try {
		const user = await User.findById(req.user._id).exec();
		const code = Math.floor(100000 + Math.random() * 900000).toString();
		user.phoneVerificationCode = code;
		user.phoneVerificationExpires = Date.now() + 15 * 60 * 1000; // 15 minutes
		await user.save();
		const html = buildCodeEmailTemplate({
			title: "Phone Number Verification",
			code,
			preface: "Use this code to verify your phone number.",
		});
		await sendEmail({
			to: user.email,
			subject: "Verify your phone number",
			html,
		});
		res.json({
			success: true,
			message: "Verification code sent to your email",
		});
	} catch (error) {
		console.error("Send phone verification code error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/phone/verify:
 *   post:
 *     summary: Verify phone number using the code sent to email
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               code:
 *                 type: string
 *     responses:
 *       200:
 *         description: Phone number verified
 */
router.post(
	"/phone/verify",
	authenticateToken,
	[body("code").notEmpty().withMessage("Code is required")],
	async (req, res) => {
		try {
			const errors = validationResult(req);
			if (!errors.isEmpty()) {
				return res.status(400).json({ success: false, errors: errors.array() });
			}
			const { code } = req.body;
			const user = await User.findById(req.user._id).exec();
			if (
				!user ||
				user.phoneVerificationCode !== code ||
				!user.phoneVerificationExpires ||
				user.phoneVerificationExpires < Date.now()
			) {
				return res
					.status(400)
					.json({ success: false, message: "Invalid or expired code" });
			}
			user.phoneVerified = true;
			user.phoneVerificationCode = undefined;
			user.phoneVerificationExpires = undefined;
			await user.save();
			res.json({ success: true, message: "Phone number verified" });
		} catch (error) {
			console.error("Verify phone error:", error);
			res
				.status(500)
				.json({ success: false, message: "Internal server error" });
		}
	}
);

/**
 * @swagger
 * /api/users/search:
 *   get:
 *     summary: Search users by username
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: query
 *         required: true
 *         schema:
 *           type: string
 *           minLength: 2
 *         description: Substring of username to search for (min 2 chars)
 *     responses:
 *       200:
 *         description: List of matching users
 *       400:
 *         description: Invalid or too-short query
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
// @route   GET /api/users/search
// @desc    Search users by username
// @access  Private
router.get("/search", authenticateToken, async (req, res) => {
	try {
		const { query } = req.query;

		if (!query || query.trim().length < 2) {
			return res.status(400).json({
				success: false,
				message: "Search query must be at least 2 characters long",
			});
		}

		const searchRegex = new RegExp(query.trim(), "i");

		const users = await User.find({
			$and: [
				{ username: searchRegex },
				{ _id: { $ne: req.user._id } }, // Exclude current user
				{ isActive: true },
			],
		})
			.select("username profilePicture status isOnline lastSeen")
			.limit(20);

		res.json({
			success: true,
			data: users,
		});
	} catch (error) {
		console.error("Search users error:", error);
		res.status(500).json({
			success: false,
			message: "Internal server error",
		});
	}
});

/**
 * @swagger
 * /api/users/online:
 *   get:
 *     summary: Get online users
 *     tags:
 *       - Users
 *     description: Returns a list of users who are currently online, excluding the requesting user.
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of currently online users
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       _id:
 *                         type: string
 *                       username:
 *                         type: string
 *                       profilePicture:
 *                         type: string
 *                       status:
 *                         type: string
 *                       lastSeen:
 *                         type: string
 *                         format: date-time
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.get("/online", authenticateToken, async (req, res) => {
	try {
		const currentUserId = req.user._id;
		const onlineUsers = await User.find({
			isOnline: true,
			_id: { $ne: currentUserId },
		})
			.select("username profilePicture status lastSeen")
			.limit(50);

		res.json({ success: true, data: onlineUsers });
	} catch (error) {
		console.error("Get online users error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/profile-picture:
 *   post:
 *     summary: Upload or update your profile picture
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               profilePicture:
 *                 type: string
 *                 format: binary
 *                 description: The profile image file (jpeg, png, etc.)
 *     responses:
 *       200:
 *         description: Profile image uploaded successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 profilePicture:
 *                   type: string
 *                   description: Public URL or path to the uploaded image
 *       400:
 *         description: No file uploaded or invalid file
 *       401:
 *         description: Unauthorized
 */
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const profilePicDir = path.join(__dirname, "../uploads/profilePics");
if (!fs.existsSync(profilePicDir)) {
	fs.mkdirSync(profilePicDir, { recursive: true });
}
const storage = multer.diskStorage({
	destination: function (req, file, cb) {
		cb(null, profilePicDir);
	},
	filename: function (req, file, cb) {
		const ext = path.extname(file.originalname);
		const uniqueName = Date.now() + "-" + Math.round(Math.random() * 1e9) + ext;
		cb(null, uniqueName);
	},
});
const upload = multer({
	storage,
	limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit
	fileFilter: (req, file, cb) => {
		if (!file.mimetype.startsWith("image/")) {
			cb(new Error("Only image files allowed!"), false);
		} else {
			cb(null, true);
		}
	},
});
router.post(
	"/profile-picture",
	authenticateToken,
	upload.single("profilePicture"),
	async (req, res) => {
		if (!req.file) {
			return res
				.status(400)
				.json({ success: false, message: "No file uploaded" });
		}
		// Update user profilePicture field
		const user = await User.findById(req.user._id).exec();
		user.profilePicture = `/uploads/profilePics/${req.file.filename}`;
		await user.save();
		res.json({ success: true, profilePicture: user.profilePicture });
	}
);
/**
 * @swagger
 * /api/users/profile-picture:
 *   delete:
 *     summary: Remove your profile picture
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Profile picture removed successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Profile picture removed
 *       401:
 *         description: Unauthorized
 *       404:
 *         description: User not found
 *       500:
 *         description: Internal server error
 */


router.delete("/profile-picture", authenticateToken, async (req, res) => {
	try {
		const user = await User.findById(req.user._id).exec();
		if (!user) {
			return res
				.status(404)
				.json({ success: false, message: "User not found" });
		}

		if (user.profilePicture) {
			const filePath = path.join(__dirname, "../", user.profilePicture);
			if (fs.existsSync(filePath)) {
				fs.unlinkSync(filePath); // 🗑️ delete the file from disk
			}
			user.profilePicture = null; // or a default avatar URL
			await user.save();
		}

		res.json({ success: true, message: "Profile picture removed" });
	} catch (error) {
		console.error("Remove profile picture error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/{userId}:
 *   get:
 *     summary: Get user by ID
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         namne: userId
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: User found
 *       404:
 *         description: User not found
 *       500:
 *         description: Internal server error
 */
// @route   GET /api/users/:userId
// @desc    Get user by ID
// @access  Private
router.get("/:userId", authenticateToken, async (req, res) => {
	try {
		const { userId } = req.params;

		const user = await User.findById(userId).select("-password");
		if (!user) {
			return res.status(404).json({
				success: false,
				message: "User not found",
			});
		}

		res.json({
			success: true,
			data: user,
		});
	} catch (error) {
		console.error("Get user by ID error:", error);
		res.status(500).json({
			success: false,
			message: "Internal server error",
		});
	}
});

/**
 * @swagger
 * /api/users/me/{token}:
 *   get:
 *     summary: Get current user's profile (token in path)
 *     tags:
 *       - Users
 *     parameters:
 *       - in: path
 *         name: token
 *         required: true
 *         schema:
 *           type: string
 *         description: JWT access token
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: User profile
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.get("/me/:token", authenticateToken, async (req, res) => {
	try {
		const user = await User.findById(req.user._id).exec();
		if (!user) {
			return res
				.status(404)
				.json({ success: false, message: "User not found" });
		}

		// Ensure user is marked online when this endpoint is hit with token
		user.isOnline = true;
		user.lastSeen = new Date();
		await user.save();

		// use fixed method
		const fullProfile = await user.getFullProfile();

		// never send password
		if (fullProfile.password) delete fullProfile.password;

		res.json({ success: true, data: fullProfile });
	} catch (error) {
		console.error("Get profile (token path) error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/block/{id}:
 *   post:
 *     summary: Block a user
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: The ID of the user to block
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: User blocked successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       400:
 *         description: Cannot block yourself
 *       401:
 *         description: Unauthorized
 *       404:
 *         description: User not found
 *       500:
 *         description: Internal server error
 */
router.post("/block/:id", authenticateToken, async (req, res) => {
	try {
		if (req.user._id.toString() === req.params.id) {
			return res
				.status(400)
				.json({ success: false, message: "Cannot block yourself" });
		}

		const user = await User.findById(req.user._id).exec();
		const targetUser = await User.findById(req.params.id);

		if (!targetUser) {
			return res
				.status(404)
				.json({ success: false, message: "User not found" });
		}

		await user.blockUser(req.params.id);

		res.json({ success: true, message: "User blocked successfully" });
	} catch (error) {
		console.error("Block user error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/unblock/{id}:
 *   post:
 *     summary: Unblock a user
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: The ID of the user to unblock
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: User unblocked successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       400:
 *         description: Cannot unblock yourself
 *       401:
 *         description: Unauthorized
 *       404:
 *         description: User not found
 *       500:
 *         description: Internal server error
 */
router.post("/unblock/:id", authenticateToken, async (req, res) => {
	try {
		if (req.user._id.toString() === req.params.id) {
			return res
				.status(400)
				.json({ success: false, message: "Cannot unblock yourself" });
		}

		const user = await User.findById(req.user._id).exec();
		const targetUser = await User.findById(req.params.id);

		if (!targetUser) {
			return res
				.status(404)
				.json({ success: false, message: "User not found" });
		}

		await user.unblockUser(req.params.id);

		res.json({ success: true, message: "User unblocked successfully" });
	} catch (error) {
		console.error("Unblock user error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/search/{token}:
 *   get:
 *     summary: Search users by username (token in path)
 *     tags:
 *       - Users
 *     parameters:
 *       - in: path
 *         name: token
 *         required: true
 *         schema:
 *           type: string
 *         description: JWT access token
 *       - in: query
 *         name: query
 *         required: true
 *         schema:
 *           type: string
 *           minLength: 2
 *         description: Substring of username to search for (min 2 chars)
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of matching users
 *       400:
 *         description: Invalid or too-short query
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.get("/search/:token", authenticateToken, async (req, res) => {
	try {
		const { query } = req.query;

		if (!query || query.trim().length < 2) {
			return res.status(400).json({
				success: false,
				message: "Search query must be at least 2 characters long",
			});
		}

		const searchRegex = new RegExp(query.trim(), "i");
		const users = await User.find({
			$and: [
				{ username: searchRegex },
				{ _id: { $ne: req.user._id } },
				{ isActive: true },
			],
		})
			.select("username profilePicture status isOnline lastSeen")
			.limit(20);

		res.json({ success: true, data: users });
	} catch (error) {
		console.error("Search users (token path) error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/{userId}/{token}:
 *   get:
 *     summary: Get user by ID (token in path)
 *     tags:
 *       - Users
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: string
 *       - in: path
 *         name: token
 *         required: true
 *         schema:
 *           type: string
 *         description: JWT access token
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: User found
 *       404:
 *         description: User not found
 *       500:
 *         description: Internal server error
 */
router.get("/:userId/:token", authenticateToken, async (req, res) => {
	try {
		const { userId } = req.params;
		const user = await User.findById(userId).select("-password");
		if (!user) {
			return res
				.status(404)
				.json({ success: false, message: "User not found" });
		}
		res.json({ success: true, data: user });
	} catch (error) {
		console.error("Get user by ID (token path) error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

/**
 * @swagger
 * /api/users/online/{token}:
 *   get:
 *     summary: Get online users (token in path)
 *     tags:
 *       - Users
 *     parameters:
 *       - in: path
 *         name: token
 *         required: true
 *         schema:
 *           type: string
 *         description: JWT access token
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of currently online users
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.get("/online/:token", authenticateToken, async (req, res) => {
	try {
		const currentUserId = req.user._id;
		const onlineUsers = await User.find({
			isOnline: true,
			_id: { $ne: currentUserId },
		})
			.select("username profilePicture status lastSeen")
			.limit(50);

		res.json({ success: true, data: onlineUsers });
	} catch (error) {
		console.error("Get online users (token path) error:", error);
		res.status(500).json({ success: false, message: "Internal server error" });
	}
});

module.exports = router;
